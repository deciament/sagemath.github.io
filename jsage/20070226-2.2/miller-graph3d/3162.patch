# HG changeset patch
# User Robert Miller <rlmillster@gmail.com>
# Date 1171840855 28800
# Node ID 573e16ac99e87bab64c5b216034f048c652a1f7c
# Parent  dbb606b4646cbc744b1c8f2db94a637c35cec6a9
Tachyon graph plotting: plot3d and show3d

diff -r dbb606b4646c -r 573e16ac99e8 sage/graphs/graph.py
--- a/sage/graphs/graph.py	Sun Feb 18 09:12:51 2007 -0800
+++ b/sage/graphs/graph.py	Sun Feb 18 15:20:55 2007 -0800
@@ -12,7 +12,7 @@ AUTHOR:
     -- Emily Kirkmann (2007-02-11): added graph_border option to plot and show
     -- Robert L. Miller (2007-02-12): vertex color-maps, graph boundaries,
         graph6 helper functions in SageX
-                        (2007-02-18): 3d plotting in Tachyon
+                        SAGE Days 3 (2007-02-17--21): 3d plotting in Tachyon,
 
 TUTORIAL:
 
@@ -1461,9 +1461,9 @@ class Graph(GenericGraph):
             sage: pl = P.plot(pos=pos_dict, color_dict=d)
             sage: pl.save('sage.png')
             
-            C = graphs.CubeGraph(8)
-            P = C.plot(vertex_labels=False, node_size=0, graph_border=True)
-            P.save('sage.png')
+            sage: C = graphs.CubeGraph(8)
+            sage: P = C.plot(vertex_labels=False, node_size=0, graph_border=True)
+            sage: P.save('sage.png')
         """
         GG = Graphics()
         if color_dict is None and not self.__boundary is None:
@@ -1510,14 +1510,39 @@ class Graph(GenericGraph):
             return BGG
         return GG
 
-    def plot3d(self, bgcolor=None, vertex_color=None, edge_color=None):
+    def plot3d(self, bgcolor=(1,1,1), vertex_color=(1,0,0), edge_color=(0,0,0), pos3d=None):
+        """
+        Plots the graph using Tachyon, and returns a Tachyon object containing
+        a representation of the graph.
+        
+        INPUT:
+            bgcolor -- background color 
+            vertex_color -- vertex color
+            edge_color -- edge color
+            (pos3d -- currently ignored, pending GSL random point distribution in sphere...)
+        
+        EXAMPLES:
+            sage: D = graphs.DodecahedralGraph()
+            sage: P3D = D.plot3d()
+            sage: P3D.save('sage.png')
+            
+            sage: G = graphs.PetersenGraph()
+            sage: G.plot3d(vertex_color=(0,0,1)).save('sage.png')
+            
+            sage: C = graphs.CubeGraph(4)
+            sage: C.plot3d(edge_color=(0,1,0), vertex_color=(1,1,1), bgcolor=(0,0,0)).save('sage.png')
+        """
         import networkx
         from math import sqrt
         from sage.plot.tachyon import Tachyon
-        pos3d = networkx.spring_layout(self._nxg, dim=3)
         c = [0,0,0]
         r = []
         verts = self.vertices()
+        pos3d = networkx.spring_layout(self._nxg, dim=3) # to be replaced by comment blocks 1, 2 below
+        #spring = False # block 1
+        #if pos3d is None:
+        #    spring = True
+        #    pos3d = networkx.spring_layout(self._nxg, dim=3)
         for v in verts:
             c[0] += pos3d[v][0]
             c[1] += pos3d[v][1]
@@ -1536,11 +1561,12 @@ class Graph(GenericGraph):
             pos3d[v][0] = pos3d[v][0]/r
             pos3d[v][1] = pos3d[v][1]/r
             pos3d[v][2] = pos3d[v][2]/r
+        #if not spring: # block 2
+        #    for v in verts:
+        #        if not v in pos3d:
+        #            pass### place node randomly inside B_1(origin)
         TT = Tachyon(camera_center=(1.4,1.4,1.4))
         TT.light((4,3,2), 0.02, (1,1,1))
-        if bgcolor is None: bgcolor=(1,1,1)
-        if vertex_color is None: vertex_color=(1,0,0)
-        if edge_color is None: edge_color=(0,0,0)
         TT.texture('node', ambient=0.1, diffuse=0.9, specular=0.03, opacity=1.0, color=vertex_color)
         TT.texture('edge', ambient=0.1, diffuse=0.9, specular=0.03, opacity=1.0, color=edge_color)
         TT.texture('bg', ambient=1, diffuse=1, specular=0, opacity=1.0, color=bgcolor)
@@ -1591,6 +1617,30 @@ class Graph(GenericGraph):
             sage: P.save('sage.png')
         """
         self.plot(pos=pos, layout=layout, vertex_labels=vertex_labels, node_size=node_size, color_dict=color_dict, graph_border=graph_border).show(**kwds)
+
+    def show3d(self, bgcolor=(1,1,1), vertex_color=(1,0,0), edge_color=(0,0,0), pos3d=None, **kwds):
+        """
+        Plots the graph using Tachyon, and returns a Tachyon object containing
+        a representation of the graph.
+        
+        INPUT:
+            bgcolor -- background color 
+            vertex_color -- vertex color
+            edge_color -- edge color
+            (pos3d -- currently ignored, pending GSL random point distribution in sphere...)
+        
+        EXAMPLES:
+            sage: D = graphs.DodecahedralGraph()
+            sage: P3D = D.plot3d()
+            sage: P3D.save('sage.png')
+            
+            sage: G = graphs.PetersenGraph()
+            sage: G.plot3d(vertex_color=(0,0,1)).save('sage.png')
+            
+            sage: C = graphs.CubeGraph(4)
+            sage: C.plot3d(edge_color=(0,1,0), vertex_color=(1,1,1), bgcolor=(0,0,0)).save('sage.png')
+        """
+        self.plot3d(bgcolor=bgcolor, vertex_color=vertex_color, edge_color=edge_color).show(**kwds)
 
 class DiGraph(GenericGraph):
     """
