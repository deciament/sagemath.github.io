# HG changeset patch
# User Carl Witty <cwitty@newtonlabs.com>
# Date 1172116171 28800
# Node ID 12aa0eb5104a38b87d4da28029caa9964af51f69
# Parent  1e9c8bb969ae0d555a752fafcede45997913488e
Support a few more Pari functions.
Add support for modreverse, nffactor, polred; extend rnfequation
by adding support for "flag" argument.

diff -r 1e9c8bb969ae -r 12aa0eb5104a sage/libs/pari/gen.pyx
--- a/sage/libs/pari/gen.pyx	Sat Feb 17 22:39:45 2007 -0800
+++ b/sage/libs/pari/gen.pyx	Wed Feb 21 19:49:31 2007 -0800
@@ -4154,6 +4154,10 @@ cdef class gen(sage.structure.element.Ri
         _sig_on
         return idealval(self.g, t0, t1)
 
+    def modreverse(self):
+        _sig_on
+        return self.new_gen(polymodrecip(self.g))
+
     def nfbasis(self, long flag=0, p=0):
         cdef gen _p
         cdef GEN g
@@ -4165,6 +4169,11 @@ cdef class gen(sage.structure.element.Ri
         _sig_on
         return self.new_gen(nfbasis0(self.g, flag, g))
 
+    def nffactor(self, x):
+        t0GEN(x)
+        _sig_on
+        return self.new_gen(nffactor(self.g, t0))
+
     def nfgenerator(self):
         f = self[0]
         x = f.variable()
@@ -4195,10 +4204,10 @@ cdef class gen(sage.structure.element.Ri
         _sig_on
         return self.new_gen(rnfelementreltoabs(self.g, t0))
 
-    def rnfequation(self, poly):
+    def rnfequation(self, poly, long flag=0):
         t0GEN(poly)
         _sig_on
-        return self.new_gen(rnfequation0(self.g, t0, 0))
+        return self.new_gen(rnfequation0(self.g, t0, flag))
 
     def rnfidealabstorel(self, x):
         t0GEN(x)
@@ -4402,6 +4411,14 @@ cdef class gen(sage.structure.element.Ri
         _sig_on
         return self.new_gen(polrecip(self.g))
     
+    def polred(self, flag=0, fa=None):
+        _sig_on
+        if fa is None:
+            return self.new_gen(polred0(self.g, flag, NULL))
+        else:
+            t0GEN(fa)
+            return self.new_gen(polred0(self.g, flag, t0))
+
     def polresultant(self, y, var=-1, flag=0):
         t0GEN(y)
         _sig_on
