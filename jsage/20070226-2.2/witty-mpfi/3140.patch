# HG changeset patch
# User Carl Witty <cwitty@newtonlabs.com>
# Date 1172117118 28800
# Node ID 3e3a6137ca7987cf03323e3a8ed963e669f5cf55
# Parent  12aa0eb5104a38b87d4da28029caa9964af51f69
Minor MPFI improvements.
Support mignitude and intersection; doctests now test for correct
behavior of relative_diameter() and diameter() (requires
mpfi-1.3.4-rc3.p3.spkg); fixed bugs in is_int() and
is_RealIntervalFieldElement()

diff -r 12aa0eb5104a -r 3e3a6137ca79 sage/rings/mpfi.pxi
--- a/sage/rings/mpfi.pxi	Wed Feb 21 19:49:31 2007 -0800
+++ b/sage/rings/mpfi.pxi	Wed Feb 21 20:05:18 2007 -0800
@@ -3,7 +3,8 @@ include '../ext/cdefs.pxi'
 
 cdef extern from "mpfi.h":
     ctypedef struct __mpfi_struct:
-        pass
+        __mpfr_struct left
+        __mpfr_struct right
     #ctypedef __mpfi_struct mpfi_t[1]
     ctypedef __mpfi_struct* mpfi_t
     ctypedef __mpfi_struct* mpfi_ptr
diff -r 12aa0eb5104a -r 3e3a6137ca79 sage/rings/mpfr.pxi
--- a/sage/rings/mpfr.pxi	Wed Feb 21 19:49:31 2007 -0800
+++ b/sage/rings/mpfr.pxi	Wed Feb 21 20:05:18 2007 -0800
@@ -129,5 +129,6 @@ cdef extern from "mpfr.h":
 
     int mpfr_neg (mpfr_ptr rop, mpfr_srcptr op, mp_rnd_t rnd)
     # int mpfr_eq (mpfr_srcptr rop, mpfr_srcptr op, unsigned long i)
-    # int mpfr_less_p (mpfr_t op1, mpfr_t op2)
+    int mpfr_less_p (mpfr_t op1, mpfr_t op2)
+    int mpfr_lessequal_p (mpfr_t op1, mpfr_t op2)
     int mpfr_cmp (mpfr_t op1, mpfr_t op2)
diff -r 12aa0eb5104a -r 3e3a6137ca79 sage/rings/real_mpfi.pyx
--- a/sage/rings/real_mpfi.pyx	Wed Feb 21 19:49:31 2007 -0800
+++ b/sage/rings/real_mpfi.pyx	Wed Feb 21 20:05:18 2007 -0800
@@ -933,13 +933,12 @@ cdef class RealIntervalFieldElement(sage
 
     def relative_diameter(self):
         """
-        XXX This MPFI function is buggy!
-
         The relative diameter of this interval (for [a ... b],
         this is (b-a)/((a+b)/2)), rounded upward, as a RealNumber.
 
         EXAMPLES:
-            sage: RIF(1, pi).relative_diameter() # todo: not implemented
+            sage: RIF(1, pi).relative_diameter()
+	    1.03418797197910
         """
         cdef RealNumber x
         x = (<RealIntervalField>self._parent).__middle_field._new()
@@ -948,30 +947,28 @@ cdef class RealIntervalFieldElement(sage
 
     def diameter(self):
         """
-        XXX This MPFI function is buggy!
-
         If (0 in self), returns self.absolute_diameter(),
         otherwise self.relative_diameter().
 
         EXAMPLES:
             sage: RIF(1, 2).diameter()
-            1.00000000000000
+            0.666666666666666
             sage: RIF(1, 2).absolute_diameter()
             1.00000000000000
             sage: RIF(1, 2).relative_diameter()
-            1.00000000000000
+            0.666666666666666
             sage: RIF(pi).diameter()
-            0.000000000000000444089209850062
+            0.000000000000000141357985842822
             sage: RIF(pi).absolute_diameter()
             0.000000000000000444089209850062
             sage: RIF(pi).relative_diameter()
-            0.000000000000000444089209850062
-            sage: (RIF(pi) - RIF(pi).square().sqrt()).diameter()
-            0.00000000000000177635683940025
-            sage: (RIF(pi) - RIF(pi).square().sqrt()).absolute_diameter()
-            0.00000000000000177635683940025
-            sage: (RIF(pi) - RIF(pi).square().sqrt()).relative_diameter()
-            +infinity
+            0.000000000000000141357985842822
+            sage: (RIF(pi) - RIF(3, 22/7)).diameter()
+            0.142857142857143
+            sage: (RIF(pi) - RIF(3, 22/7)).absolute_diameter()
+            0.142857142857143
+            sage: (RIF(pi) - RIF(3, 22/7)).relative_diameter()
+            2.03604377705517
         """
         cdef RealNumber x
         x = (<RealIntervalField>self._parent).__middle_field._new()
@@ -993,7 +990,22 @@ cdef class RealIntervalFieldElement(sage
         mpfi_mag(<mpfr_t> x.value, self.value)
         return x
 
-    # I'm skipping mignitude (mpfi_mig()).  Is this a useful function?
+    def mignitude(self):
+        """
+        The smallest absolute value of the elements of the interval.
+
+        EXAMPLES:
+            sage: RIF(-2, 1).mignitude()
+            0.000000000000000
+            sage: RIF(-2, -1).mignitude()
+            1.00000000000000
+            sage: RIF(3, 4).mignitude()
+            3.00000000000000
+        """
+        cdef RealNumber x
+        x = (<RealIntervalField>self._parent).__middle_field._new()
+        mpfi_mig(<mpfr_t> x.value, self.value)
+        return x
 
     def center(self):
         """
@@ -1510,9 +1522,34 @@ cdef class RealIntervalFieldElement(sage
         except TypeError, msg:
             return False
 
-    # Skipping mpfi_intersect(), because it can return an empty
-    # interval (where nothing else can), and I don't want to
-    # deal with empty intervals everywhere.
+    def intersection(self, other):
+        """
+        Return the intersection of two intervals.  If the intervals
+        do not overlap, raises a ValueError.
+
+        EXAMPLES:
+            sage: RIF(1, 2).intersection(RIF(1.5, 3))
+            [1.5000000000000000 ... 2.0000000000000000]
+            sage: RIF(1, 2).intersection(RIF(4/3, 5/3))
+            [1.3333333333333332 ... 1.6666666666666668]
+            sage: RIF(1, 2).intersection(RIF(3, 4))
+            Traceback (most recent call last):
+            ...
+            ValueError: intersection of non-overlapping intervals
+        """
+        cdef RealIntervalFieldElement x
+        x = self._new()
+        cdef RealIntervalFieldElement other_intv
+        if PY_TYPE_CHECK(other, RealIntervalFieldElement):
+            other_intv = other
+        else:
+            # Let type errors from _coerce_ propagate...
+            other_intv = self._parent._coerce_(other)
+
+        mpfi_intersect(x.value, self.value, other_intv.value)
+        if mpfr_less_p(&x.value.right, &x.value.left):
+            raise ValueError, "intersection of non-overlapping intervals"
+        return x
 
     def union(self, other):
         """
@@ -1554,12 +1591,11 @@ cdef class RealIntervalFieldElement(sage
 
     def sqrt(self):
         """
-        Return a square root of self.
-
-        If self is negative a complex number is returned.
-
-        If you use self.square_root() then a real number will always
-        be returned (though it will be NaN if self is negative).
+        Return a square root of self.  Raises an error if self is
+        nonpositive.
+
+        If you use self.square_root() then an interval will always
+        be returned (though it will be NaN if self is nonpositive).
 
         EXAMPLES:
             sage: r = RIF(4.0)
@@ -1596,7 +1632,7 @@ cdef class RealIntervalFieldElement(sage
     def square_root(self):
         """
         Return a square root of self.  An interval will always be
-        returned (though it will be NaN if self is negative).
+        returned (though it will be NaN if self is nonpositive).
 
         EXAMPLES:
             sage: r = RIF(-2.0)
@@ -1817,13 +1853,13 @@ cdef class RealIntervalFieldElement(sage
             sage: a = RIF(-1.1, -0.9)
             sage: a.is_int()
             (True, -1)
-        """
-        if self.diameter() >= 1:
-            return False, None
-        a = (self.lower()+1).floor()
+            sage: a = RIF(0.1, 1.9)
+            sage: a.is_int()
+            (True, 1)
+        """
+        a = (self.lower()).ceil()
         b = (self.upper()).floor()
         if a == b:
-            
             return True, a
         else:
             return False, None
@@ -2253,7 +2289,7 @@ def is_RealIntervalField(x):
     return PY_TYPE_CHECK(x, RealIntervalField)
 
 def is_RealIntervalFieldElement(x):
-    return PY_TYPE_CHECK(x, RealIntervalFieldElementClass)
+    return PY_TYPE_CHECK(x, RealIntervalFieldElement)
 
 
 #### pickle functions
