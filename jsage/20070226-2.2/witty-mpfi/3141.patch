# HG changeset patch
# User Carl Witty <cwitty@newtonlabs.com>
# Date 1172129718 28800
# Node ID 4e6d3dc6663f4e5555d1cec74591829b0e166398
# Parent  3e3a6137ca7987cf03323e3a8ed963e669f5cf55
Support Element subclasses which are partially ordered.
Classes which want totally ordered comparisons can implement
_cmp_c_impl() as before; classes which want partially ordered comparisons
can implement _richcmp_c_impl() instead.

diff -r 3e3a6137ca79 -r 4e6d3dc6663f sage/structure/element.pxd
--- a/sage/structure/element.pxd	Wed Feb 21 20:05:18 2007 -0800
+++ b/sage/structure/element.pxd	Wed Feb 21 23:35:18 2007 -0800
@@ -11,8 +11,10 @@ import  sage_object
 
 cdef class Element(sage_object.SageObject):
     cdef ParentWithBase _parent
+    cdef _richcmp_c_impl(left, Element right, int op)
     cdef int _cmp_c_impl(left, Element right) except -2
     cdef public _richcmp(self, right, int op)
+    cdef public _cmp(self, right)
     cdef _set_parent_c(self, ParentWithBase parent)
     cdef base_extend_c(self, ParentWithBase R)       # do *NOT* override, but OK to call directly
     cdef base_extend_c_impl(self, ParentWithBase R)  # OK to override, but do NOT call
diff -r 3e3a6137ca79 -r 4e6d3dc6663f sage/structure/element.pyx
--- a/sage/structure/element.pyx	Wed Feb 21 20:05:18 2007 -0800
+++ b/sage/structure/element.pyx	Wed Feb 21 23:35:18 2007 -0800
@@ -314,27 +314,53 @@ cdef class Element(sage_object.SageObjec
     def is_zero(self):
         return PyBool_FromLong(self == self._parent(0))
 
-    def _richcmp_(left, right, op):
-        return left._richcmp(right, op)
-
-    cdef _richcmp(left, right, int op):
-        """
-        Compare left and right. 
+    def _cmp_(left, right):
+        return left._cmp(right)
+
+    cdef _cmp(left, right):
+        """
+        Compare left and right.
         """
         cdef int r
         if not have_same_parent(left, right):
             try:
                 _left, _right = canonical_coercion_c(left, right)
-                r = cmp(_left, _right)
+                if PY_IS_NUMERIC(_left):
+                    return cmp(_left, _right)
+                else:
+                    return _left._cmp_(_right)
             except TypeError:
                 r = cmp(type(left), type(right))
                 if r == 0:
                     r = -1
+                return r
+        else:
+            return left._cmp_c_impl(right)
+
+    def _richcmp_(left, right, op):
+        return left._richcmp(right, op)
+
+    cdef _richcmp(left, right, int op):
+        """
+        Compare left and right, according to the comparison operator op.
+        """
+        cdef int r
+        if not have_same_parent(left, right):
+            try:
+                _left, _right = canonical_coercion_c(left, right)
+                if PY_IS_NUMERIC(_left):
+                    r = cmp(_left, _right)
+                else:
+                    return _left._richcmp_(_right, op)
+            except TypeError:
+                r = cmp(type(left), type(right))
+                if r == 0:
+                    r = -1
         else:
             if HAS_DICTIONARY(left):   # fast check
                 r = left.__cmp__(right)
             else:
-                r = left._cmp_c_impl(right)
+                return left._richcmp_c_impl(right, op)
 
         return left._rich_to_bool(op, r)
 
@@ -356,7 +382,12 @@ cdef class Element(sage_object.SageObjec
     # For a derived Pyrex class, you **must** put the following in
     # your subclasses, in order for it to take advantage of the
     # above generic comparison code.  You must also define
-    # _cmp_c_impl.
+    # either _cmp_c_impl (if your subclass is totally ordered),
+    # _richcmp_c_impl (if your subclass is partially ordered), or both
+    # (if your class has both a total order and a partial order;
+    # then the total order will be available with cmp(), and the partial
+    # order will be available with the relation operators; in this case
+    # you must also define __cmp__ in your subclass).
     # This is simply how Python works.
     #
     # For a *Python* class just define __cmp__ as always.
@@ -366,13 +397,24 @@ cdef class Element(sage_object.SageObjec
     def __richcmp__(left, right, int op):
         return (<Element>left)._richcmp(right, op)
     
+    ####################################################################
+    # If your subclass has both a partial order (available with the
+    # relation operators) and a total order (available with cmp()),
+    # you **must** put the following in your subclass.
+    # 
+    # Note that in this case the total order defined by cmp() will
+    # not properly respect coercions.
+    ####################################################################
+    def __cmp__(left, right):
+        return (<Element>left)._cmp(right)
+
+    cdef _richcmp_c_impl(left, Element right, int op):
+        return left._rich_to_bool(op, left._cmp_c_impl(right))
+
     cdef int _cmp_c_impl(left, Element right) except -2:
         ### For derived SAGEX code, you *MUST* ALSO COPY the __richcmp__ above
         ### into your class!!!  For Python code just use __cmp__.
         raise NotImplementedError, "BUG: sort algorithm for elements of '%s' not implemented"%right.parent()
-
-    def __cmp__(left, right):
-        return left._cmp_c_impl(right)   # default
 
 def is_ModuleElement(x):
     """
