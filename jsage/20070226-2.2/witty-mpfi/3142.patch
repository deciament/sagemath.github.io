# HG changeset patch
# User Carl Witty <cwitty@newtonlabs.com>
# Date 1172129870 28800
# Node ID acd8f46ec463fbae3033a4c6fca01d8fbba30ec3
# Parent  4e6d3dc6663f4e5555d1cec74591829b0e166398
Make RealIntervalFieldElement be partially ordered.
Now, A op B iff (all a in A, all b in B: a op b) (where
op is ==,!=,<,<=,>,>=).  Also, cmp() on RealIntervalFieldElement
is lexicographic.

diff -r 4e6d3dc6663f -r acd8f46ec463 sage/rings/real_mpfi.pyx
--- a/sage/rings/real_mpfi.pyx	Wed Feb 21 23:35:18 2007 -0800
+++ b/sage/rings/real_mpfi.pyx	Wed Feb 21 23:37:50 2007 -0800
@@ -44,6 +44,56 @@ EXAMPLES:
     True
     sage: a == 2
     False
+
+COMPARISONS:
+
+Comparison operations (==,!=,<,<=,>,>=) return true if every value in
+the first interval has the given relation to every value in the second
+interval.  The cmp(a, b) function works differently; it compares two
+intervals lexicographically.  (However, the behavior is not specified
+if given a non-interval and an interval.)
+
+This convention for comparison operators has good and bad points.  The
+good:
+* Expected transitivity properties hold (if a > b and b == c, then a > c;
+etc.)
+* if a>b, then cmp(a, b) == 1; if a==b, then cmp(a,b) == 0; if a<b, then
+cmp(a, b) == -1
+* a==0 is true if the interval contains only the floating-point number 0;
+similarly for a==1
+* a>0 means something useful (that every value in the interval is greater
+than 0)
+
+The bad:
+* Trichotomy fails to hold: there are values (a,b) such that none of a<b,
+a==b, or a>b are true
+* It is not the case that if cmp(a, b) == 0 then a==b, or that if
+cmp(a, b) == 1 then a>b, or that if cmp(a, b) == -1 then a<b
+* There are values a,b such that a<=b but neither a<b nor a==b hold
+
+Note that intervals a and b overlap iff not(a != b).
+
+EXAMPLES:
+    sage: 0 < RIF(1, 2)
+    True
+    sage: 0 == RIF(0)
+    True
+    sage: not(0 == RIF(0, 1))
+    True
+    sage: not(0 != RIF(0, 1))
+    True
+    sage: 0 <= RIF(0, 1)
+    True
+    sage: not(0 < RIF(0, 1))
+    True
+    sage: cmp(RIF(0), RIF(0, 1))
+    -1
+    sage: cmp(RIF(0, 1), RIF(0))
+    1
+    sage: cmp(RIF(0, 1), RIF(1))
+    -1
+    sage: cmp(RIF(0, 1), RIF(0, 1))
+    0    
 """
  
 ############################################################################
@@ -705,12 +755,12 @@ cdef class RealIntervalFieldElement(sage
         
         EXAMPLES:
             sage: a = RIF(5,5.5)
-            sage: loads(dumps(a)) == a
-            True        
+            sage: cmp(loads(dumps(a)), a)
+            0        
             sage: R = RealIntervalField(sci_not=1, prec=200)
             sage: b = R('393.39203845902384098234098230948209384028340')
-            sage: loads(dumps(b)) == b
-            True
+            sage: cmp(loads(dumps(b)), b)
+            0
             sage: b = R(1)/R(0); b
             [+infinity ... +infinity]
             sage: loads(dumps(b)) == b
@@ -721,8 +771,8 @@ cdef class RealIntervalFieldElement(sage
             True
             sage: b = R('[2 ... 3]'); b
             [2.0000000000000000000000000000000000000000000000000000000000000e0 ... 3.0000000000000000000000000000000000000000000000000000000000000e0]
-            sage: loads(dumps(b)) == b
-            True
+            sage: cmp(loads(dumps(b)), b)
+            0
         """
         s = self.str(32, no_sci=False, e='@')
         return (__create__RealIntervalFieldElement_version0, (self._parent, s, 32))
@@ -1453,40 +1503,232 @@ cdef class RealIntervalFieldElement(sage
         return bool(mpfi_nan_p(self.value))
 
     def __richcmp__(left, right, int op):
-        return (<RingElement>left)._richcmp(right, op)
+        return (<Element>left)._richcmp(right, op)
+    
+    cdef _richcmp_c_impl(left, Element right, int op):
+        """
+        Implements comparisons between intervals.  (See the file header
+        comment for more information on interval comparison.)
+
+        EXAMPLES:
+            sage: 0 < RIF(1, 3)
+            True
+            sage: 1 < RIF(1, 3)
+            False
+            sage: 2 < RIF(1, 3)
+            False
+            sage: 4 < RIF(1, 3)
+            False
+            sage: RIF(0, 1/2) < RIF(1, 3)
+            True
+            sage: RIF(0, 1) < RIF(1, 3)
+            False
+            sage: RIF(0, 2) < RIF(1, 3)
+            False
+            sage: RIF(1, 2) < RIF(1, 3)
+            False
+            sage: RIF(1, 3) < 4
+            True
+            sage: RIF(1, 3) < 3
+            False
+            sage: RIF(1, 3) < 2
+            False
+            sage: RIF(1, 3) < 0
+            False
+            sage: 0 <= RIF(1, 3)
+            True
+            sage: 1 <= RIF(1, 3)
+            True
+            sage: 2 <= RIF(1, 3)
+            False
+            sage: 4 <= RIF(1, 3)
+            False
+            sage: RIF(0, 1/2) <= RIF(1, 3)
+            True
+            sage: RIF(0, 1) <= RIF(1, 3)
+            True
+            sage: RIF(0, 2) <= RIF(1, 3)
+            False
+            sage: RIF(1, 2) <= RIF(1, 3)
+            False
+            sage: RIF(1, 3) <= 4
+            True
+            sage: RIF(1, 3) <= 3
+            True
+            sage: RIF(1, 3) <= 2
+            False
+            sage: RIF(1, 3) <= 0
+            False
+            sage: RIF(1, 3) > 0
+            True
+            sage: RIF(1, 3) > 1
+            False
+            sage: RIF(1, 3) > 2
+            False
+            sage: RIF(1, 3) > 4
+            False
+            sage: RIF(1, 3) > RIF(0, 1/2)
+            True
+            sage: RIF(1, 3) > RIF(0, 1)
+            False
+            sage: RIF(1, 3) > RIF(0, 2)
+            False
+            sage: RIF(1, 3) > RIF(1, 2)
+            False
+            sage: 4 > RIF(1, 3)
+            True
+            sage: 3 > RIF(1, 3)
+            False
+            sage: 2 > RIF(1, 3)
+            False
+            sage: 0 > RIF(1, 3)
+            False
+            sage: RIF(1, 3) >= 0
+            True
+            sage: RIF(1, 3) >= 1
+            True
+            sage: RIF(1, 3) >= 2
+            False
+            sage: RIF(1, 3) >= 4
+            False
+            sage: RIF(1, 3) >= RIF(0, 1/2)
+            True
+            sage: RIF(1, 3) >= RIF(0, 1)
+            True
+            sage: RIF(1, 3) >= RIF(0, 2)
+            False
+            sage: RIF(1, 3) >= RIF(1, 2)
+            False
+            sage: 4 >= RIF(1, 3)
+            True
+            sage: 3 >= RIF(1, 3)
+            True
+            sage: 2 >= RIF(1, 3)
+            False
+            sage: 0 >= RIF(1, 3)
+            False
+            sage: 0 == RIF(0)
+            True
+            sage: 0 == RIF(1)
+            False
+            sage: 1 == RIF(0)
+            False
+            sage: 0 == RIF(0, 1)
+            False
+            sage: 1 == RIF(0, 1)
+            False
+            sage: RIF(0, 1) == RIF(0, 1)
+            False
+            sage: RIF(1) == 0
+            False
+            sage: RIF(1) == 1
+            True
+            sage: RIF(0) == RIF(0)
+            True
+            sage: RIF(pi) == RIF(pi)
+            False
+            sage: RIF(0, 1) == RIF(1, 2)
+            False
+            sage: RIF(1, 2) == RIF(0, 1)
+            False
+            sage: 0 != RIF(0)
+            False
+            sage: 0 != RIF(1)
+            True
+            sage: 1 != RIF(0)
+            True
+            sage: 0 != RIF(0, 1)
+            False
+            sage: 1 != RIF(0, 1)
+            False
+            sage: RIF(0, 1) != RIF(0, 1)
+            False
+            sage: RIF(1) != 0
+            True
+            sage: RIF(1) != 1
+            False
+            sage: RIF(0) != RIF(0)
+            False
+            sage: RIF(pi) != RIF(pi)
+            False
+            sage: RIF(0, 1) != RIF(1, 2)
+            False
+            sage: RIF(1, 2) != RIF(0, 1)
+            False
+        """
+        cdef RealIntervalFieldElement lt, rt
+
+        lt = left
+        rt = right
+
+        if op == 0: #<
+            return PyBool_FromLong(mpfr_less_p(&lt.value.right, &rt.value.left))
+        elif op == 2: #==
+            # a == b iff a<=b and b <= a
+            # (this gives a result with two comparisons, where the
+            # obvious approach would use three)
+            return PyBool_FromLong(mpfr_lessequal_p(&lt.value.right, &rt.value.left)) \
+                and PyBool_FromLong(mpfr_lessequal_p(&rt.value.right, &lt.value.left))
+        elif op == 4: #>
+            return PyBool_FromLong(mpfr_less_p(&rt.value.right, &lt.value.left))
+        elif op == 1: #<=
+            return PyBool_FromLong(mpfr_lessequal_p(&lt.value.right, &rt.value.left))
+        elif op == 3: #!=
+            return PyBool_FromLong(mpfr_less_p(&lt.value.right, &rt.value.left)) \
+                or PyBool_FromLong(mpfr_less_p(&rt.value.right, &lt.value.left))
+        elif op == 5: #>=
+            return PyBool_FromLong(mpfr_lessequal_p(&rt.value.right, &lt.value.left))
+
+    def __cmp__(left, right):
+        """
+        Compare two intervals lexicographically.  Returns 0 if they
+        are the same interval, -1 if the second is larger, or 1 if
+        the first is larger.
+
+        EXAMPLES:
+            sage: cmp(RIF(0), RIF(1))
+            -1
+            sage: cmp(RIF(0, 1), RIF(1))
+            -1
+            sage: cmp(RIF(0, 1), RIF(1, 2))
+            -1
+            sage: cmp(RIF(0, 0.99999), RIF(1, 2))
+            -1
+            sage: cmp(RIF(1, 2), RIF(0, 1))
+            1
+            sage: cmp(RIF(1, 2), RIF(0))
+            1
+            sage: cmp(RIF(0, 1), RIF(0, 2))
+            -1
+            sage: cmp(RIF(0, 1), RIF(0, 1))
+            0
+            sage: cmp(RIF(0, 1), RIF(0, 1/2))
+            1
+        """
+        return (<Element>left)._cmp(right)
 
     cdef int _cmp_c_impl(left, Element right) except -2:
         """
-        Compare two intervals.  Returns 0 if they overlap, -1 if the
-        second is larger, or 1 if the first is larger.
-
-        EXAMPLES:
-            sage: RIF(0) < RIF(1)
-            True
-            sage: RIF(0, 1) < RIF(1)
-            False
-            sage: RIF(0, 1) == RIF(1, 2)
-            True
-            sage: RIF(0, 0.99999) == RIF(1, 2)
-            False
-            sage: RIF(1, 2) > RIF(0, 1)
-            False
-            sage: RIF(1, 2) > RIF(0)
-            True
-        """
-        cdef RealIntervalFieldElement self, x
-        self = left
-        x = right 
+        Implements the lexicographic total order on intervals.
+        """
+        cdef RealIntervalFieldElement lt, rt
+
+        lt = left
+        rt = right
 
         cdef int i
-        i = mpfi_cmp(self.value, x.value)
+        i = mpfr_cmp(&lt.value.left, &rt.value.left)
         if i < 0:
             return -1
-        elif i == 0:
-            return 0
+        elif i > 0:
+            return 1
+        i = mpfr_cmp(&lt.value.right, &rt.value.right)
+        if i < 0:
+            return -1
+        elif i > 0:
+            return 1
         else:
-            return 1
-    
+            return 0    
 
     def __contains__(self, other):
         """
@@ -1608,6 +1850,8 @@ cdef class RealIntervalFieldElement(sage
             sage: r.sqrt()
             [65.909028213136323 ... 65.909028213136339]
             sage: r.sqrt()^2 == r
+            False
+            sage: r in r.sqrt()^2
             True
             sage: r.sqrt()^2 - r            
             [-0.00000000000090949470177292824 ... 0.0000000000018189894035458565]
@@ -1972,8 +2216,10 @@ cdef class RealIntervalFieldElement(sage
             [0.49999999999999988 ... 0.50000000000000012]
             sage: q2 = i.acos(); q2
             [1.0471975511965974 ... 1.0471975511965981]
-            sage: q2 == q
-            True
+            sage: q == q2
+            False
+            sage: q != q2
+            False
             sage: q2.lower() == q.lower()
             False
             sage: q - q2
@@ -1999,8 +2245,10 @@ cdef class RealIntervalFieldElement(sage
             [0.58778525229247302 ... 0.58778525229247325]
             sage: q2 = i.asin(); q2
             [0.62831853071795851 ... 0.62831853071795885]
-            sage: q2 == q
-            True
+            sage: q == q2
+            False
+            sage: q != q2
+            False
             sage: q2.lower() == q.lower()
             False
             sage: q - q2
@@ -2026,8 +2274,10 @@ cdef class RealIntervalFieldElement(sage
             [0.72654252800536078 ... 0.72654252800536113]
             sage: q2 = i.atan(); q2
             [0.62831853071795851 ... 0.62831853071795885]
-            sage: q2 == q
-            True
+            sage: q == q2
+            False
+            sage: q != q2
+            False
             sage: q2.lower() == q.lower()
             False
             sage: q - q2
@@ -2299,4 +2549,3 @@ def __create__RealIntervalField_version0
 ## Keep all old versions!!!
 def __create__RealIntervalFieldElement_version0(parent, x, base=10):
     return RealIntervalFieldElement(parent, x, base=base)
-
