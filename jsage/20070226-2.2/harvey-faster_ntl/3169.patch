# HG changeset patch
# User dmharvey@math.harvard.edu
# Date 1172542300 28800
# Node ID 3d257489c9621babf75aead221bd41dea072806b
# Parent  1e9c8bb969ae0d555a752fafcede45997913488e
faster list() method for polys in Z[x]

diff -r 1e9c8bb969ae -r 3d257489c962 sage/libs/ntl/ntl.pyx
--- a/sage/libs/ntl/ntl.pyx	Sat Feb 17 22:39:45 2007 -0800
+++ b/sage/libs/ntl/ntl.pyx	Mon Feb 26 18:11:40 2007 -0800
@@ -29,7 +29,6 @@ include 'decl.pxi'
 
 from sage.rings.integer import Integer
 from sage.rings.integer cimport Integer
-#cimport sage.rings.integer
 
 
 ##############################################################################
@@ -328,7 +327,7 @@ cdef class ntl_ZZX:
          0
         """
         cdef Integer output
-        output = Integer()
+        output = PY_NEW(Integer)
         ZZX_getitem_as_mpz(&output.value, self.x, i)
         return output
 
@@ -355,6 +354,24 @@ cdef class ntl_ZZX:
          0
         """
         return self.getitem_as_int(i)
+
+    def list(self):
+        r"""
+        Retrieves coefficients as a list of SAGE Integers.
+        
+        EXAMPLES:
+            sage: x = ntl.ZZX([129381729371289371237128318293718237, 2, -3, 0, 4])
+            sage: L = x.list(); L
+            [129381729371289371237128318293718237, 2, -3, 0, 4]
+            sage: type(L[0])
+            <type 'sage.rings.integer.Integer'>
+            sage: x = ntl.ZZX()
+            sage: L = x.list(); L
+            []
+        """
+        cdef int i
+        return [self[i] for i from 0 <= i <= ZZX_degree(self.x)]
+    
 
     def __add__(ntl_ZZX self, ntl_ZZX other):
         """
diff -r 1e9c8bb969ae -r 3d257489c962 sage/rings/polynomial_element_generic.py
--- a/sage/rings/polynomial_element_generic.py	Sat Feb 17 22:39:45 2007 -0800
+++ b/sage/rings/polynomial_element_generic.py	Mon Feb 26 18:11:40 2007 -0800
@@ -1480,8 +1480,12 @@ class Polynomial_integer_dense(Polynomia
             sage: f = x^3 + 3*x - 17
             sage: f.list()
             [-17, 3, 0, 1]
-        """
-        return [ZZ(str(self.__poly[i])) for i in xrange(self.degree()+1)]
+            sage: f = PolynomialRing(ZZ,'x')(0)
+            sage: f.list()
+            []
+        """
+        return self.__poly.list()
+    
 
     def resultant(self, other):
         """
