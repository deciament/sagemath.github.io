# HG changeset patch
# User jkantor@localhost.localdomain
# Date 1171933690 28800
# Node ID 8b27f0312d4f9d03a6c41ee3f23175235d605d79
# Parent  1e9c8bb969ae0d555a752fafcede45997913488e
Added probability distribution generating points randomly on surface of sphere.

diff -r 1e9c8bb969ae -r 8b27f0312d4f sage/gsl/all.py
--- a/sage/gsl/all.py	Sat Feb 17 22:39:45 2007 -0800
+++ b/sage/gsl/all.py	Mon Feb 19 17:08:10 2007 -0800
@@ -13,3 +13,4 @@ from probability_distribution import Rea
 from probability_distribution import RealDistribution
 from integration import numerical_integral
 integral_numerical = numerical_integral
+from probability_distribution import SphericalDistribution
diff -r 1e9c8bb969ae -r 8b27f0312d4f sage/gsl/probability_distribution.pxd
--- a/sage/gsl/probability_distribution.pxd	Sat Feb 17 22:39:45 2007 -0800
+++ b/sage/gsl/probability_distribution.pxd	Mon Feb 19 17:08:10 2007 -0800
@@ -2,6 +2,13 @@ include 'gsl.pxi'
 include 'gsl.pxi'
 cdef class ProbabilityDistribution:
     pass
+
+cdef class SphericalDistribution(ProbabilityDistribution):
+    cdef gsl_rng_type *T
+    cdef gsl_rng*r
+    cdef Py_ssize_t dimension
+    cdef long int seed
+    cdef double* vec
 
 cdef class RealDistribution(ProbabilityDistribution):
     cdef gsl_rng_type *T
diff -r 1e9c8bb969ae -r 8b27f0312d4f sage/gsl/probability_distribution.pyx
--- a/sage/gsl/probability_distribution.pyx	Sat Feb 17 22:39:45 2007 -0800
+++ b/sage/gsl/probability_distribution.pyx	Mon Feb 19 17:08:10 2007 -0800
@@ -19,10 +19,11 @@ import sage.plot.plot
 #include '../ext/interrupt.pxi'
 #include 'gsl.pxi'
 #cimport sage.rings.real_double
-import sage.rings.real_double 
+import sage.rings.real_double
+#from sage.modules.real_double_vector import 
 import random
 import integration
-
+from sage.modules.free_module_element import vector
 
 
 #TODO: Add more distributions available in gsl
@@ -47,6 +48,71 @@ cdef class ProbabilityDistribution:
    
    def get_random_element(self):
       raise NotImplementedError,"implement in derived class"
+
+cdef class SphericalDistribution(ProbabilityDistribution):
+   r"""
+   This class is capable of producing random points uniformly distributed on the surface of an
+   n-1 sphere in n dimensional euclidean space. The dimension, n is selected via the
+   keyword dimension. The random number generator which drives it can be selected using the keyword
+   rng. Valid choices are 'default' which uses the Mersenne-Twister, 'luxury' which uses RANDLXS,
+   and 'taus' which uses the tausworth generator. The default dimension is 3.
+   sage: T=SphericalDistribution()
+   sage: T.get_random_element()
+   sage: T=SphericalDistribution(dimension=4,rng='luxury')
+   sage: T.get_random_element()
+   """
+   def __init__(self,dimension=3,rng='default',seed=None):
+      gsl_rng_env_setup()
+      self.set_random_number_generator(rng)
+      self.r=gsl_rng_alloc(self.T)
+      if seed==None:
+         self.seed=random.randint(1,2^32)
+      self.set_seed(self.seed)
+      self.dimension=dimension
+      self.vec=<double *>malloc(self.dimension*(sizeof(double)))
+
+   def set_seed(self,seed):
+      gsl_rng_set(self.r,seed)
+      self.seed=seed
+   
+   def set_random_number_generator(self,rng='default'):
+      if rng=='default':
+         self.T=gsl_rng_default         
+      elif rng=='luxury':
+         self.T=gsl_rng_ranlxd2
+      elif rng=='taus':
+         self.T=gsl_rng_taus2
+      else:
+         raise TypeError,"Not a valid random number generator"
+      
+   def __dealloc__(self):
+      if self.r!=NULL:
+         gsl_rng_free(self.r)
+      free(self.vec)
+
+   def get_random_element(self):
+      cdef int i
+      v=[0]*self.dimension
+      gsl_ran_dir_nd(self.r,self.dimension,self.vec)
+      for i from 0<=i<self.dimension:
+         v[i]=self.vec[i]
+      return vector(sage.rings.real_double.RDF,v) #This could be made more efficient by directly constructing the vector, TODO.
+
+   def reset_distribution(self):
+      """
+      This method resets the distribution.
+
+      EXAMPLES:
+         sage: T = SphericalDistribution()
+         sage: v = [T.get_random_element() for _ in range(10)]
+         sage: T.reset_distribution()
+         sage: w = [T.get_random_element() for _ in range(10)]
+      """
+      if self.r!=NULL:
+         gsl_rng_free(self.r)
+      self.r = gsl_rng_alloc(self.T)
+      self.set_seed(self.seed)
+#      gsl_rng_env_setup()
 
 
    
