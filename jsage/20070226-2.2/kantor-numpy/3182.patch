# HG changeset patch
# User jkantor@localhost.localdomain
# Date 1172361054 28800
# Node ID 6a79a766bf3dcb390763dbdbd11a5b44ad18ae57
# Parent  a7ec047172ff1c85c1c9c36ba7b505557aa60c35
fixed linear algebra bugs for RDF added routines, improved numpy support

diff -r a7ec047172ff -r 6a79a766bf3d sage/matrix/constructor.py
--- a/sage/matrix/constructor.py	Fri Feb 23 15:16:47 2007 -0800
+++ b/sage/matrix/constructor.py	Sat Feb 24 15:50:54 2007 -0800
@@ -21,6 +21,8 @@ import sage.rings.all as rings
 import sage.rings.all as rings
 import sage.matrix.matrix_space as matrix_space
 from sage.structure.sequence import Sequence
+from sage.rings.real_double import RDF
+from sage.rings.complex_double import CDF
 
 def matrix(arg0=None, arg1=None, arg2=None, arg3=None, sparse=None):
     """
@@ -42,7 +44,7 @@ def matrix(arg0=None, arg1=None, arg2=No
                matrix over ring with given number of rows and entries from the flat list
         7. matrix(ring, nrows, ncols, entries, [sparse=True]):
                matrix over the given ring with given number of rows and columns and entries.
-        
+        8. matrix(numpy_array)
     The sparse option is optional, must be explicitly named (i.e.,
     sparse=True), and may be either True or False.
 
@@ -201,7 +203,19 @@ def matrix(arg0=None, arg1=None, arg2=No
         sage: print a, a.is_sparse()
         [ 0  0  0  0  0]
         [ 0  0 10  0  0]
-        [ 0  0  0  0  0] True    
+        [ 0  0  0  0  0] True
+    8. Creating a matrix from a numpy array
+        Any numpy array with a datatype of float or complex may be passed to matrix
+        If the data type is float the result will be a matrix over the real double field.
+        complex numpy arrays will give matrices over the complex double field.
+        The data of the numpy array must be contiguous, so slices of other matrices will raise an exception.
+
+        
+        sage: import numpy
+        sage: n=numpy.array([[1,2],[3,4]],float)
+        sage: m=matrix(n)
+        sage: n=numpy.array([[numpy.complex(0,1),numpy.complex(0,2)],[3,4]],complex)
+        sage: m=matrix(n)
     """
     if hasattr(arg0, '_matrix_'):
         if arg1 is None:
@@ -327,9 +341,38 @@ def matrix(arg0=None, arg1=None, arg2=No
             ncols = int(arg2)
         entries = arg3
         if isinstance(entries, dict):
-            if sparse is None: sparse = True                        
+            if sparse is None: sparse = True
+    elif len(arg0.shape)==2:
+       import numpy
+       if isinstance(arg0,numpy.ndarray):
+           if str(arg0.dtype).count('float')==1:
+               if arg0.flags.c_contiguous==True:
+                   m=matrix(RDF,arg0.shape[0],arg0.shape[1],0)
+                   m._replace_self_with_numpy(arg0)
+                   return m
+           elif str(arg0.dtype).count('complex')==1:
+               if arg0.flags.c_contiguous==True:
+                   m=matrix(CDF,arg0.shape[0],arg0.shape[1],0)
+                   m._replace_self_with_numpy(arg0)
+                   return m                                                                                                                                
+            
     else:
-        raise TypeError, "unknown matrix constructor format.  Type matrix? for help"
+        import numpy
+        if isinstance(arg0,numpy.ndarray):
+            if str(arg0.dtype).count('float')==1:
+                if arg0.flags.c_contiguous==True:
+                    m=matrix(RDF,arg0.shape[0],arg0.shape[1],0)
+                    m._replace_self_with_numpy(arg0)
+                    return m
+            elif str(arg0.dtype).count('complex')==1:
+                if arg0.flags.c_contiguous==True:
+                    m=matrix(CDF,arg0.shape[0],arg0.shape[1],0)
+                    m._replace_self_with_numpy(arg0)
+                    return m                                                                                                                                
+  
+
+        else:
+            raise TypeError, "unknown matrix constructor format.  Type matrix? for help"
 
     if sparse is None:
         sparse = False
diff -r a7ec047172ff -r 6a79a766bf3d sage/matrix/matrix_complex_double_dense.pyx
--- a/sage/matrix/matrix_complex_double_dense.pyx	Fri Feb 23 15:16:47 2007 -0800
+++ b/sage/matrix/matrix_complex_double_dense.pyx	Sat Feb 24 15:50:54 2007 -0800
@@ -24,10 +24,11 @@ include '../ext/python.pxi'
 include '../ext/python.pxi'
 #include '../gsl/gsl.pxi'
 from sage.rings.complex_double cimport ComplexDoubleElement
+from sage.modules.complex_double_vector cimport ComplexDoubleVectorSpaceElement
 import sage.rings.complex_double
 import sage.rings.real_double
 from matrix cimport Matrix
-from sage.structure.element cimport ModuleElement
+from sage.structure.element cimport ModuleElement, Vector
 cdef extern from "arrayobject.h":
 #The following exposes the internal C structure of the numpy python object
 # extern class [object PyArrayObject]  tells pyrex that this is
@@ -112,7 +113,7 @@ cdef class Matrix_complex_double_dense(m
             raise MemoryError, "unable to allocate memory for matrix "
         self._LU = <gsl_matrix_complex *> NULL
         self._p = <gsl_permutation *> NULL
-        self._LU_valid = 0 
+
     
     def __dealloc__(self):
         gsl_matrix_complex_free(self._matrix)
@@ -165,7 +166,7 @@ cdef class Matrix_complex_double_dense(m
         cdef ComplexDoubleElement z
         z = sage.rings.complex_double.CDF(value)   # do I assume value is already CDF
         gsl_matrix_complex_set(self._matrix,i,j,z._complex) #sig on here ?
-        self._LU_valid  = 0 
+
     cdef get_unsafe(self, Py_ssize_t i, Py_ssize_t j):
         cdef gsl_complex z
         z= gsl_matrix_complex_get(self._matrix,i,j)
@@ -251,7 +252,7 @@ cdef class Matrix_complex_double_dense(m
     # cdef int _cmp_c_impl(self, Matrix right) except -2:
     def __invert__(self):
         cdef int result_LU, result_invert
-        if(self._LU_valid != 1):
+        if self.fetch('LU_valid') != True:
             self._c_compute_LU()
         cdef Matrix_complex_double_dense M                
         parent = self.matrix_space(self._nrows,self._ncols)
@@ -291,7 +292,7 @@ cdef class Matrix_complex_double_dense(m
         result_LU = gsl_linalg_complex_LU_decomp(self._LU,self._p,&self._signum)
         _sig_off
         if result_LU == GSL_SUCCESS:
-            self._LU_valid = 1
+            self.cache('LU_valid',True)
         else:
             raise ValueError,"Error computing LU decomposition"
         
@@ -340,10 +341,10 @@ cdef class Matrix_complex_double_dense(m
             _result_matrix._matrix.data[i] = p[i]
 
         return ( [sage.rings.complex_double.CDF(x) for x in v],_result_matrix)   #todo: make the result a complex double matrix 
-    
-        
-    def solve_left(self, vec):
-        """
+
+
+    def solve_left(self,vec):
+        """ 
         Solve the equation A*x = b, where
         
         EXAMPLES:
@@ -358,13 +359,51 @@ cdef class Matrix_complex_double_dense(m
             sage: A*x
             (1.0 + 1.0*I, 2.0 + 2.0*I, 3.0 + 3.0*I)
         """
+        import numpy
+        cdef double *p
+        cdef ComplexDoubleVectorSpaceElement _vec,ans
+        _vec=vec
+        cdef ndarray _result
+        _result=numpy.linalg.solve(self.numpy(),_vec.numpy())
+        M=self._column_ambient_module()
+        ans=M.zero_vector()
+        p = <double *>_result.data
+#        cdef gsl_vector* result
+#        result=gsl_vector_alloc(_result.dimension[0])
+        memcpy(ans.v.data,_result.data,_result.dimensions[0]*sizeof(double)*2)
+        return ans
+
+    
+        
+    def solve_left_LU(self, vec):
+        """
+        Solve the equation A*x = b, where
+        
+        EXAMPLES:
+            sage: A =I*matrix(CDF, 3,3, [1,2,5,7.6,2.3,1,1,2,-1])
+            sage: A   # slightly random output
+            [1.0*I             2.0*I                5.0*I]
+	    [7.59999990463*I   2.29999995232*I      1.0*I]
+ 	    [1.0*I             2.0*I               -1.0*I]
+            sage: b = vector(CDF,[1,2,3])+I*vector(CDF,[1,2,3])
+            sage: x = A.solve_left(b); x
+            (-0.113695090439 + 0.113695092499*I, 1.39018087855 - 1.39018082619*I, -0.333333333333 + 0.333333343267*I)
+            sage: A*x
+            (1.0 + 1.0*I, 2.0 + 2.0*I, 3.0 + 3.0*I)
+
+        This method precomputes and stores the LU decomposition before solving. If many equations of the form Ax=b need to
+        be solved for a singe matrix A, then this method should be used instead of solve.The first time this method is called
+        it will compute the LU decomposition.
+        If the matrix hs not changed then subsequent calls will be very fast as the precomputed LU decomposition will be used.
+        
+        """
         import solve
         return solve.solve_matrix_complex_double_dense(self, vec)
     
     def determinant(self):
          """compute the determinant using GSL (LU decompositon)"""
          cdef gsl_complex z
-         if(self._LU_valid !=1):
+         if(self.fetch('LU_valid') !=True):
              self._c_compute_LU()
          z=gsl_linalg_complex_LU_det(self._LU, self._signum)
          return sage.rings.complex_double.CDF(GSL_REAL(z),GSL_IMAG(z))
@@ -373,7 +412,7 @@ cdef class Matrix_complex_double_dense(m
          """compute the log of the absolute value of the determinant using GSL(LU decomposition)
            useful if the determinant overlows"""
          cdef double z 
-         if(self._LU_valid !=1):
+         if(self.fetch('LU_valid') !=True):
              self._c_compute_LU()
          z=gsl_linalg_complex_LU_lndet(self._LU)       
          return sage.rings.real_double.RDF(z)
@@ -409,7 +448,7 @@ cdef class Matrix_complex_double_dense(m
         """
         if self._ncols!=self._nrows:
             raise TypeError,"LU decomposition only works for square matrix"
-        if self._LU_valid != 1:
+        if self.fetch('LU_valid') != True:
             self._c_compute_LU()
         cdef Py_ssize_t i,j,k,l,copy_result
         cdef Matrix_complex_double_dense P, L,U
@@ -434,6 +473,17 @@ cdef class Matrix_complex_double_dense(m
         return [P,L,U]
 
     def numpy(self):
+        r"""
+        This method returns a copy of the matrix as a numpy array. It is fast as the copy is done
+        using the numpy C/api.
+        sage: import numpy
+        sage: m=matrix(CDF,[[1,2],[3,4]])
+        sage: m=I*m
+        sage: n=m.numpy()
+        sage: numpy.linalg.eig(n)
+        
+        
+        """
         import_array() #This must be called before using the numpy C/api or you will get segfault
         cdef Matrix_complex_double_dense _M,_result_matrix
         _M=self
@@ -451,3 +501,39 @@ cdef class Matrix_complex_double_dense(m
         _n = temp
         _n.flags = _n.flags|(NPY_OWNDATA) # this sets the ownership flag
         return _n
+
+
+    def _replace_self_with_numpy(self,numpy_matrix):
+        cdef ndarray n
+        cdef double *p
+        n=numpy_matrix
+        p=<double *>n.data
+        memcpy(self._matrix.data,p,sizeof(double)*self._nrows*self._ncols*2)
+
+    cdef Vector _matrix_times_vector_c_impl(self,Vector v):
+        cdef ComplexDoubleVectorSpaceElement v_,ans
+        cdef gsl_complex a,b
+        cdef gsl_vector *vec
+        cdef Py_ssize_t i,j
+        M=self._column_ambient_module()
+        v_ = v
+        ans=M.zero_vector()
+        GSL_SET_COMPLEX(&a,1.0,0)
+        GSL_SET_COMPLEX(&b,0,0)
+        gsl_blas_zgemv(CblasNoTrans,a,self._matrix, v_.v,b,ans.v)
+        return ans
+
+    cdef Vector _vector_times_matrix_c_impl(self,Vector v):
+        cdef ComplexDoubleVectorSpaceElement v_,ans
+        cdef gsl_complex a,b
+        cdef gsl_vector *vec
+        cdef Py_ssize_t i,j
+        M=self._row_ambient_module()
+        v_ = v
+        ans=M.zero_vector()
+        GSL_SET_COMPLEX(&a,1.0,0)
+        GSL_SET_COMPLEX(&b,0,0)
+        gsl_blas_zgemv(CblasTrans,a,self._matrix, v_.v,b,ans.v)
+        return ans
+
+
diff -r a7ec047172ff -r 6a79a766bf3d sage/matrix/matrix_real_double_dense.pyx
--- a/sage/matrix/matrix_real_double_dense.pyx	Fri Feb 23 15:16:47 2007 -0800
+++ b/sage/matrix/matrix_real_double_dense.pyx	Sat Feb 24 15:50:54 2007 -0800
@@ -26,7 +26,7 @@ from matrix cimport Matrix
 from matrix cimport Matrix
 from sage.structure.element cimport ModuleElement,Vector
 from sage.modules.real_double_vector cimport RealDoubleVectorSpaceElement
-
+from constructor import matrix
 cimport sage.structure.element
 
 cdef extern from "arrayobject.h":
@@ -112,7 +112,7 @@ cdef class Matrix_real_double_dense(matr
             raise MemoryError, "unable to allocate memory for matrix "
         self._LU = <gsl_matrix *> NULL
         self._p = <gsl_permutation *> NULL
-        self._LU_valid = 0 
+
     
     def __dealloc__(self):
         gsl_matrix_free(self._matrix)
@@ -126,6 +126,8 @@ cdef class Matrix_real_double_dense(matr
         return self._richcmp(right, op)
     def __hash__(self):
         return self._hash()
+    def LU_valid(self):
+        return self.fetch('LU_valid')
     
     
     def __init__(self, parent, entries, copy, coerce):
@@ -165,7 +167,6 @@ cdef class Matrix_real_double_dense(matr
         cdef double z
         z = float(value)
         gsl_matrix_set(self._matrix,i,j,z) #sig on here ?
-        self._LU_valid  = 0 
     cdef get_unsafe(self, Py_ssize_t i, Py_ssize_t j):
         return sage.rings.real_double.RDF(gsl_matrix_get(self._matrix,i,j)) #sig on here?
     
@@ -245,13 +246,12 @@ cdef class Matrix_real_double_dense(matr
     # cdef int _cmp_c_impl(self, Matrix right) except -2:
     def __invert__(self):
         cdef int result_LU, result_invert
-        if(self._LU_valid != 1):
+        if self.fetch('LU_valid')!=True:
             self._c_compute_LU()
         cdef Matrix_real_double_dense M                
         parent = self.matrix_space(self._nrows,self._ncols)
         M=Matrix_real_double_dense.__new__(Matrix_real_double_dense,parent,None,None,None)
         result_invert = gsl_linalg_LU_invert(self._LU,self._p,M._matrix)
-        self._LU_valid = 1
         return M 
 
     # def __copy__(self):
@@ -286,9 +286,10 @@ cdef class Matrix_real_double_dense(matr
         result_LU = gsl_linalg_LU_decomp(self._LU,self._p,&self._signum)	
         _sig_off
         if result_LU == GSL_SUCCESS:
-            self._LU_valid = 1
+            self.cache('LU_valid',True)
         else:
             raise ValueError,"Error computing LU decomposition"
+        
         
     def LU(self):
         """
@@ -314,7 +315,7 @@ cdef class Matrix_real_double_dense(matr
     
         if self._ncols!=self._nrows:
             raise TypeError,"LU decomposition only works for square matrix"
-        if self._LU_valid != 1:
+        if self.fetch('LU_valid')!=True:
             self._c_compute_LU()
         cdef Py_ssize_t i,j,k,l,copy_result
         cdef Matrix_real_double_dense P, L,U
@@ -356,29 +357,33 @@ cdef class Matrix_real_double_dense(matr
         IMPLEMENTATION:
             Uses numpy.
         """
-        import_array() #This must be called before using the numpy C/api or you will get segfault
-        cdef Matrix_real_double_dense _M,_result_matrix
-        _M=self
-        cdef int dims[2]
-        cdef int i
-        cdef object temp
-        cdef double *p
-        cdef ndarray _n,_m
-        dims[0] = _M._matrix.size1
-        dims[1] = _M._matrix.size2
-        temp = PyArray_FromDims(2, dims, 12)
-        _n = temp                          
-        _n.flags = _n.flags&(~NPY_OWNDATA) # this perform as a logical AND on NOT(NPY_OWNDATA), which sets that bit to 0
-        _n.data = <char *> _M._matrix.data #numpy arrays store their data as char *
         import numpy
-        v,_m = numpy.linalg.eig(_n)
-        parent = self.matrix_space(self._nrows,self._ncols)
-        _result_matrix = Matrix_real_double_dense.__new__(Matrix_real_double_dense,parent,None,None,None)
-        p = <double *> _m.data
-        for i from 0<=i<_M._matrix.size1*_M._matrix.size2:
-            _result_matrix._matrix.data[i] = p[i]
-        return ([sage.rings.complex_double.CDF(x) for x in v], _result_matrix)   #todo: make the result a real double matrix 
-    def solve_left(self, vec):
+        v_,m_=numpy.linalg.eig(self.numpy())
+        return ([sage.rings.complex_double.CDF(x) for x in v_],matrix(m_))
+##         import_array() #This must be called before using the numpy C/api or you will get segfault
+##         cdef Matrix_real_double_dense _M,_result_matrix
+##         _M=self
+##         cdef int dims[2]
+##         cdef int i
+##         cdef object temp
+##         cdef double *p
+##         cdef ndarray _n,_m
+##         dims[0] = _M._matrix.size1
+##         dims[1] = _M._matrix.size2
+##         temp = PyArray_FromDims(2, dims, 12)
+##         _n = temp                          
+##         _n.flags = _n.flags&(~NPY_OWNDATA) # this perform as a logical AND on NOT(NPY_OWNDATA), which sets that bit to 0
+##         _n.data = <char *> _M._matrix.data #numpy arrays store their data as char *
+##         import numpy
+##         v,_m = numpy.linalg.eig(_n)
+##         parent = self.matrix_space(self._nrows,self._ncols)
+##         _result_matrix = Matrix_real_double_dense.__new__(Matrix_real_double_dense,parent,None,None,None)
+##         p = <double *> _m.data
+##         for i from 0<=i<_M._matrix.size1*_M._matrix.size2:
+##             _result_matrix._matrix.data[i] = p[i]
+##         return ([sage.rings.complex_double.CDF(x) for x in v], _result_matrix)   #todo: make the result a real double matrix
+    
+    def solve_left_LU(self, vec):
         """
         Solve the equation A*x = b, where
         
@@ -392,10 +397,33 @@ cdef class Matrix_real_double_dense(matr
             (-0.113695090439, 1.39018087855, -0.333333333333)
             sage: A*x
             (1.0, 2.0, 3.0)
-        """
+        
+        This method precomputes and stores the LU decomposition before solving. If many equations of the form Ax=b need to
+        be solved for a singe matrix A, then this method should be used instead of solve.The first time this method is called
+        it will compute the LU decomposition.
+        If the matrix hs not changed then subsequent calls will be very fast as the precomputed LU decomposition will be reused.
+
+        """
+        
         import solve
         return solve.solve_matrix_real_double_dense(self, vec)
-    def solve_numpy(self,vec):
+
+    def solve_left(self,vec):
+        """
+        Solve the equation A*x = b, where
+        
+        EXAMPLES:
+            sage: A = matrix(RDF, 3,3, [1,2,5,7.6,2.3,1,1,2,-1]); A
+            [ 1.0  2.0  5.0]
+            [ 7.6  2.3  1.0]
+            [ 1.0  2.0 -1.0]
+            sage: b = vector(RDF,[1,2,3])
+            sage: x = A.solve_left(b); x
+            (-0.113695090439, 1.39018087855, -0.333333333333)
+            sage: A*x
+            (1.0, 2.0, 3.0)
+        """
+        
         import numpy
         cdef double *p
         cdef RealDoubleVectorSpaceElement _vec,ans
@@ -407,19 +435,19 @@ cdef class Matrix_real_double_dense(matr
         p = <double *>_result.data
 #        cdef gsl_vector* result
 #        result=gsl_vector_alloc(_result.dimension[0])
-        memcpy(ans.v.data,_result.data,_result.dimension[0]*sizeof(double))
-        
+        memcpy(ans.v.data,_result.data,_result.dimensions[0]*sizeof(double))
+        return ans
         
     def determinant(self):
          """compute the determinant using GSL (LU decompositon)"""
-         if(self._LU_valid !=1):
+         if self.fetch('LU_valid')!=True:
              self._c_compute_LU()
          return gsl_linalg_LU_det(self._LU, self._signum)
    
     def log_determinant(self):
          """compute the log of the determinant using GSL(LU decomposition)
            useful if the determinant overlows"""
-         if(self._LU_valid !=1):
+         if self.fetch('LU_valid')!=True:
              self._c_compute_LU()
          return gsl_linalg_LU_lndet(self._LU)
     def transpose(self):
@@ -526,7 +554,7 @@ cdef class Matrix_real_double_dense(matr
              raise ValueError,"Error computing QR factorization"
          return [Q,R]
 
-    def cholesky(self,check_symmetry=True):
+    def _cholesky_gsl(self,check_symmetry=True):
         cdef gsl_matrix *A
         cdef Matrix_real_double_dense result
         cdef int i,j
@@ -567,7 +595,22 @@ cdef class Matrix_real_double_dense(matr
         return self.fetch('symmetric')
 
 
-    def cholesky_numpy(self):
+    def cholesky(self):
+        """
+        Computes the cholesky factorization of matrix. The matrix must be symmetric
+        and positive definite or an
+        exception will be raised.
+        sage:M=MatrixSpace(RDF,5)
+        sage:r=matrix(RDF,[[   0.,    0.,    0.,    0.,    1.],
+                           [   1.,    1.,    1.,    1.,    1.],
+                           [  16.,    8.,    4.,    2.,    1.],
+                           [  81.,   27.,    9.,    3.,    1.],
+                           [ 256.,   64.,   16.,    4.,    1.]])
+                                    
+        sage:m=r*M(1)*r.transpose()
+        sage:c=m.cholesky()
+        sage:c*c.transpose()
+        """
         cdef Matrix_real_double_dense _M,_result_matrix
         _M=self
         cdef int i
@@ -580,6 +623,8 @@ cdef class Matrix_real_double_dense(matr
         p = <double *> _m.data
         for i from 0<=i<_M._matrix.size1*_M._matrix.size2:
             _result_matrix._matrix.data[i] = p[i]
+        if numpy.isfortran(_m)==True:
+            return _result_matrix.transpose()
         return _result_matrix
 #        return ([sage.rings.complex_double.CDF(x) for x in v], _result_matrix)   #todo: make the result a real double matrix 
 
@@ -593,8 +638,10 @@ cdef class Matrix_real_double_dense(matr
         M=self._row_ambient_module()
         v_ = v
         ans=M.zero_vector()
-        gsl_blas_dgemv(CblasNoTrans,1.0,self._matrix, v_.v,0.0,ans.v)
+        gsl_blas_dgemv(CblasTrans,1.0,self._matrix, v_.v,0.0,ans.v)
         return ans
+
+
 
     cdef Vector _matrix_times_vector_c_impl(self,Vector v):
         cdef RealDoubleVectorSpaceElement v_,ans
@@ -603,11 +650,20 @@ cdef class Matrix_real_double_dense(matr
         M=self._column_ambient_module()
         v_ = v
         ans=M.zero_vector()
-        gsl_blas_dgemv(CblasTrans,1.0,self._matrix, v_.v,0.0,ans.v)
+        gsl_blas_dgemv(CblasNoTrans,1.0,self._matrix, v_.v,0.0,ans.v)
         return ans
 
                       
     def numpy(self):
+        """
+        This method returns a copy of the matrix as a numpy array. It uses the numpy C/api so is
+        very fast
+        sage: import numpy
+        sage: m=matrix(RDF,[[1,2],[3,4]])
+        sage: n=m.numpy()
+        sage: numpy.linalg.eig(n)
+ 
+        """
         import_array() #This must be called before using the numpy C/api or you will get segfault
         cdef Matrix_real_double_dense _M,_result_matrix
         _M=self
@@ -625,3 +681,14 @@ cdef class Matrix_real_double_dense(matr
         _n = temp
         _n.flags = _n.flags|(NPY_OWNDATA) # this sets the ownership bug
         return _n
+
+
+    def _replace_self_with_numpy(self,numpy_matrix):
+        cdef ndarray n
+        cdef double *p
+        n=numpy_matrix
+        p=<double *>n.data
+        memcpy(self._matrix.data,p,sizeof(double)*self._nrows*self._ncols)
+
+
+                                                
diff -r a7ec047172ff -r 6a79a766bf3d sage/matrix/solve.pyx
--- a/sage/matrix/solve.pyx	Fri Feb 23 15:16:47 2007 -0800
+++ b/sage/matrix/solve.pyx	Sat Feb 24 15:50:54 2007 -0800
@@ -22,7 +22,8 @@ def solve_matrix_real_double_dense(mat, 
        cdef gsl_vector *b
        cdef gsl_permutation *p
        cdef gsl_matrix *LU
-       if _mat._LU_valid == 0:
+#       if _mat._LU_valid == 0:
+       if _mat.fetch('LU_valid')!=True:
            _mat._c_compute_LU()
        result_vector = <gsl_vector *> gsl_vector_alloc(_mat._matrix.size1)
        cdef int result_solve
@@ -50,7 +51,7 @@ def solve_matrix_complex_double_dense(ma
        cdef gsl_permutation *p
        cdef gsl_matrix_complex *LU
        cdef gsl_complex z
-       if _mat._LU_valid == 0:
+       if _mat.fetch('LU_valid')!=True:
            _mat._c_compute_LU()
        result_vector = <gsl_vector_complex *> gsl_vector_complex_alloc(_mat._matrix.size1)
        cdef int result_solve
diff -r a7ec047172ff -r 6a79a766bf3d sage/modules/complex_double_vector.pyx
--- a/sage/modules/complex_double_vector.pyx	Fri Feb 23 15:16:47 2007 -0800
+++ b/sage/modules/complex_double_vector.pyx	Sat Feb 24 15:50:54 2007 -0800
@@ -283,6 +283,13 @@ cdef class ComplexDoubleVectorSpaceEleme
         _n.flags = _n.flags|(NPY_OWNDATA) # this sets the ownership flag
         return _n
 
+    def _replace_self_with_numpy(self,numpy_array):
+        cdef double* p
+        cdef ndarray n
+        n=numpy_array
+        p=<double *>n.data
+        memcpy(self.v.data,p,self.v.size*sizeof(double)*2)
+        
         
 cdef int ispow(int n):
     while n and n%2==0:
diff -r a7ec047172ff -r 6a79a766bf3d sage/modules/free_module_element.pyx
--- a/sage/modules/free_module_element.pyx	Fri Feb 23 15:16:47 2007 -0800
+++ b/sage/modules/free_module_element.pyx	Sat Feb 24 15:50:54 2007 -0800
@@ -68,7 +68,6 @@ import operator
 
 include '../ext/cdefs.pxi'
 include '../ext/stdsage.pxi'
-
 import sage.misc.misc as misc
 import sage.misc.latex as latex
 
@@ -84,6 +83,8 @@ import sage.rings.arith
 
 from sage.rings.ring import is_Ring
 import sage.rings.integer_ring
+from sage.rings.real_double import RDF
+from sage.rings.complex_double import CDF
 
 #from sage.matrix.matrix cimport Matrix
 
@@ -98,6 +99,7 @@ def vector(arg0, arg1=None, sparse=None)
         1. vector(object)
         2. vector(ring, object)
         3. vector(object, ring)
+        4. vector(numpy_array)
         
     INPUT:
         elts -- entries of a vector (either a list or dict).
@@ -150,7 +152,18 @@ def vector(arg0, arg1=None, sparse=None)
 
     Make a vector mod 3 out of a vector over ZZ:
         sage: vector(vector([1,2,3]), GF(3))
-        (1, 2, 0)        
+        (1, 2, 0)
+
+    Any 1 dimensional numpy array of type float or complex may be passed to vector. The result
+    will vector in the appropriate dimensional vector space over the real double field or the
+    complex double field. The data in the array must be contiguous so columnwise slices of numpy matrices
+    will rase an exception.
+
+    sage: import numpy
+    sage: x=numpy.random.randn(10)
+    sage: y=vector(x)
+    sage: v=numpy.random.randn(10)*numpy.complex(0,1)
+    sage: w=vector(v)
     """
     if hasattr(arg0, '_vector_'):
         if arg1 is None:
@@ -173,6 +186,24 @@ def vector(arg0, arg1=None, sparse=None)
         if sparse is None:
             sparse = True
         v, R = prepare_dict(v, R)
+
+    from numpy import ndarray
+    from free_module import VectorSpace
+    if isinstance(v,ndarray):
+        if len(v.shape)==1:
+            if str(v.dtype).count('float')==1:
+                if v.flags.c_contiguous==True:
+                    V=VectorSpace(RDF,v.shape[0])
+                    _v=V.zero_vector()
+                    _v._replace_self_with_numpy(v)
+                    return _v
+            if str(v.dtype).count('complex')==1:
+                if v.flags.c_contiguous==True:
+                    V=VectorSpace(CDF,v.shape[0])
+                    _v=V.zero_vector()
+                    _v._replace_self_with_numpy(v)
+                    return _v
+                
     else:
         if sparse is None:
             sparse = False
diff -r a7ec047172ff -r 6a79a766bf3d sage/modules/real_double_vector.pyx
--- a/sage/modules/real_double_vector.pyx	Fri Feb 23 15:16:47 2007 -0800
+++ b/sage/modules/real_double_vector.pyx	Sat Feb 24 15:50:54 2007 -0800
@@ -237,5 +237,11 @@ cdef class RealDoubleVectorSpaceElement(
         _n = temp
         _n.flags = _n.flags|(NPY_OWNDATA) # this sets the ownership flag
         return _n
-
-
+    
+    def _replace_self_with_numpy(self,numpy_array):
+        cdef double *p
+        cdef ndarray n
+        n=numpy_array
+        p=<double *>n.data
+        memcpy(self.v.data,p,self.v.size*sizeof(double))
+
