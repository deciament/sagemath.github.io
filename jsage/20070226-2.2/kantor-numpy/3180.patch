# HG changeset patch
# User jkantor@localhost.localdomain
# Date 1172272567 28800
# Node ID c62f949939469b39d39f16d0e62d611d9ce6140a
# Parent  44c677dc46ff295a216eebb5481bc50d0a7c81fc
# Parent  5ed4f056fa9efb10857e27a25120ef91fd4f7f23
merged

diff -r 44c677dc46ff -r c62f94993946 sage/combinat/expnums.pyx
--- a/sage/combinat/expnums.pyx	Fri Feb 23 15:14:12 2007 -0800
+++ b/sage/combinat/expnums.pyx	Fri Feb 23 15:16:07 2007 -0800
@@ -110,12 +110,15 @@ def expnums(int n, int aa):
 #     return bell[1];
 # end);
 
+def expnums2(n, aa):
+    r"""
+    A vanilla python (but compiled via pyrex) implementation of expnums.
 
-
-def expnums2(n, aa):
+    We Compute the first $n$ exponential numbers around $aa$, starting
+    with the zero-th.    
+    """
     if n < 1:
         return []
-    
     if n == 1:
         return [Integer(1)]
 
diff -r 44c677dc46ff -r c62f94993946 sage/interfaces/macaulay2.py
--- a/sage/interfaces/macaulay2.py	Fri Feb 23 15:14:12 2007 -0800
+++ b/sage/interfaces/macaulay2.py	Fri Feb 23 15:16:07 2007 -0800
@@ -98,6 +98,7 @@ from expect import Expect, ExpectElement
 from expect import Expect, ExpectElement
 
 from sage.misc.misc import verbose
+from sage.misc.multireplace import multiple_replace
 
 from re import search
 
@@ -288,12 +289,14 @@ class Macaulay2Element(ExpectElement):
     def str(self):
         P = self._check_valid()
         X = P.eval('toExternalString(%s)'%self.name(), strip=True)
+        
         if 'stdio:' in X:
             if 'cannot be converted to external string' in ans:
                 return clean_output(P.eval(self, '%s'%code))
             raise RuntimeError, "Error evaluating Macaulay2 code.\nIN:%s\nOUT:%s"%(code, ans)
-        return X
-
+
+        s = multiple_replace({'\r':'', '\n':' '}, X)
+        return s
 
     def __len__(self):
         self._check_valid()
diff -r 44c677dc46ff -r c62f94993946 sage/rings/polynomial_ring.py
--- a/sage/rings/polynomial_ring.py	Fri Feb 23 15:14:12 2007 -0800
+++ b/sage/rings/polynomial_ring.py	Fri Feb 23 15:16:07 2007 -0800
@@ -165,8 +165,8 @@ class PolynomialRing_general(sage.algebr
                 return self._singular_().parent(x).sage_poly(self)
             except:
                 raise TypeError,"Unable to coerce string"
-        elif isinstance(x, multi_polynomial_element.MPolynomial_polydict):
-            return x.univariate_polynomial(self)
+        # elif isinstance(x, multi_polynomial_element.MPolynomial_polydict):
+        #    return x.univariate_polynomial(self)
         elif is_MagmaElement(x):
             x = list(x.Eltseq())
         return C(self, x, check, is_gen, construct=construct)
diff -r 44c677dc46ff -r c62f94993946 sage/rings/quotient_ring_element.py
--- a/sage/rings/quotient_ring_element.py	Fri Feb 23 15:14:12 2007 -0800
+++ b/sage/rings/quotient_ring_element.py	Fri Feb 23 15:16:07 2007 -0800
@@ -131,10 +131,7 @@ class QuotientRingElement(ring_element.R
 
     def __rdiv__(self, left):
         return self.parent()(left)/self
-    
-    def __pow__(self, right):
-        return QuotientRingElement(self.parent(), self.__rep**right)
-    
+        
     def __neg__(self):
         return QuotientRingElement(self.parent(), -self.__rep)
     
